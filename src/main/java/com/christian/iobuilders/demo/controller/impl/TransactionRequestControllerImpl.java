package com.christian.iobuilders.demo.controller.impl;

import com.christian.iobuilders.demo.controller.TransactionRequestController;
import com.christian.iobuilders.demo.pojos.Transaction;
import com.christian.iobuilders.demo.pojos.User;
import com.christian.iobuilders.demo.service.TransactionService;
import com.christian.iobuilders.demo.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import java.util.List;

/**
 * Controller for all transaction related requests
 */
@Controller
public class TransactionRequestControllerImpl implements TransactionRequestController {

    @Autowired
    private TransactionService transService;

    @Autowired
    private UserService userService;


    /**
     * Endpoint used to perform transactions between users in the system
     * @param id Url param to set the sender id
     * @param transaction Body of the post request containing all the transaction data like:
     *
     * {
     *     "senderId":"1",
     *     "receiverId":"2",
     *     "amount":10
     * }
     *
     * @return It returns the transaction with the autogenerated ID and a 200 Ok response
     */
    @Override
    @PostMapping(value = "/transact/{id}")
    public ResponseEntity performTransaction(@PathVariable Long id, @RequestBody Transaction transaction) {

        Transaction savedTransaction = transService.transact(id,transaction);

        return new ResponseEntity(savedTransaction,HttpStatus.OK);
    }

    /**
     * Endpoint used to add funds to a user balance
     *
     * @param id Parameter used to represent the user id to perform the transaction
     * @param transaction Transaction with only a receiver id that should be the same as the sender to add the amount specified
     *
     *      {
     *           "receiverId":"2",
     *           "amount":10
     *      }
     *
     * @return It returns the user object with the updated balance, and a 200 OK response
     */
    @Override
    @PostMapping(value = "/addFunds/{id}", consumes = "application/json")
    public ResponseEntity addFunds(@PathVariable Long id,@RequestBody Transaction transaction) {

        User user = transService.addFunds(id,transaction);

        return new ResponseEntity(user,HttpStatus.OK);
    }


    /**
     * This endpoint is used to find all the users registered in order to perform a transaction using a certain id
     * It is a get request so it does not take any parameter.
     * @return Returns the user list from the database
     */
    @Override
    @GetMapping(value = "/users")
    public ResponseEntity getUsers() {
        List users = userService.getAll();
        return new ResponseEntity(users, HttpStatus.OK);
    }
}